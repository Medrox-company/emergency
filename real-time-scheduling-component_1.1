import React, { useState, useMemo, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';

type ShiftType = 'day' | 'night';
type AvailabilityStatus = 'none' | 'available' | 'maybe' | 'unavailable';

interface UserAvailability {
  [key: string]: {
    [date: string]: {
      day: AvailabilityStatus;
      night: AvailabilityStatus;
    }
  }
}

const mesice = [
  'Leden', 'Únor', 'Březen', 'Duben', 'Květen', 'Červen',
  'Červenec', 'Srpen', 'Září', 'Říjen', 'Listopad', 'Prosinec'
];

const dnyVTydnu = ['Po', 'Út', 'St', 'Čt', 'Pá', 'So', 'Ne'];

// Simulated users
const USERS = [
  { id: 'user1', name: 'Jan Novák' },
  { id: 'user2', name: 'Anna Svobodová' },
  { id: 'user3', name: 'Petr Čermák' }
];

const RealTimePlanSluzeb: React.FC = () => {
  const [currentUser, setCurrentUser] = useState<string>(USERS[0].id);
  const [availability, setAvailability] = useState<UserAvailability>({});
  const [activeMonth, setActiveMonth] = useState<Date>(new Date());

  // Simulate initial data
  useEffect(() => {
    const initialAvailability: UserAvailability = {};
    USERS.forEach(user => {
      initialAvailability[user.id] = {};
    });
    setAvailability(initialAvailability);
  }, []);

  const getTotalAvailableDays = useMemo(() => {
    let totalAvailableDayShifts = 0;
    let totalAvailableNightShifts = 0;
    Object.values(availability).forEach(userShifts => {
      Object.values(userShifts).forEach(dateShifts => {
        if (dateShifts.day === 'available') totalAvailableDayShifts++;
        if (dateShifts.night === 'available') totalAvailableNightShifts++;
      });
    });
    return {
      dayShifts: totalAvailableDayShifts,
      nightShifts: totalAvailableNightShifts
    };
  }, [availability]);

  const getShiftStats = useMemo(() => {
    const stats = {
      day: { available: 0, maybe: 0, unavailable: 0 },
      night: { available: 0, maybe: 0, unavailable: 0 }
    };

    Object.values(availability).forEach(userShifts => {
      Object.values(userShifts).forEach(dateShifts => {
        (['day', 'night'] as ShiftType[]).forEach(shiftType => {
          switch(dateShifts[shiftType]) {
            case 'available':
              stats[shiftType].available++;
              break;
            case 'maybe':
              stats[shiftType].maybe++;
              break;
            case 'unavailable':
              stats[shiftType].unavailable++;
              break;
          }
        });
      });
    });

    return stats;
  }, [availability]);

  const handleShiftClick = (date: Date, shiftType: ShiftType) => {
    const dateStr = date.toISOString().split('T')[0];
    const currentUserAvailability = availability[currentUser]?.[dateStr] || { day: 'none', night: 'none' };
    
    const getNextStatus = (current: AvailabilityStatus): AvailabilityStatus => {
      const sequence: AvailabilityStatus[] = ['none', 'available', 'maybe', 'unavailable'];
      return sequence[(sequence.indexOf(current) + 1) % sequence.length];
    };

    const newAvailability = {
      ...availability,
      [currentUser]: {
        ...availability[currentUser],
        [dateStr]: {
          ...currentUserAvailability,
          [shiftType]: getNextStatus(currentUserAvailability[shiftType])
        }
      }
    };

    setAvailability(newAvailability);
  };

  const renderCalendarDay = (date: Date) => {
    const isCurrentMonth = date.getMonth() === activeMonth.getMonth();
    const dateStr = date.toISOString().split('T')[0];
    const isWeekend = date.getDay() === 0 || date.getDay() === 6;

    if (!isCurrentMonth) {
      return <div className="calendar-day opacity-25" />;
    }

    const getStatusColor = (status: AvailabilityStatus, shiftType: ShiftType) => {
      switch (status) {
        case 'available': return `bg-emerald-500 hover:bg-emerald-600 text-white`;
        case 'maybe': return `bg-amber-500 hover:bg-amber-600 text-white`;
        case 'unavailable': return `bg-rose-500 hover:bg-rose-600 text-white`;
        default: return isWeekend ? 'bg-gray-100 text-gray-400' : 'bg-white hover:bg-gray-50 text-gray-400';
      }
    };

    // Collect all users' statuses for this date
    const dayStatuses = Object.entries(availability).map(
      ([userId, userAvailability]) => 
        userAvailability[dateStr]?.day || 'none'
    );
    const nightStatuses = Object.entries(availability).map(
      ([userId, userAvailability]) => 
        userAvailability[dateStr]?.night || 'none'
    );

    return (
      <div className="relative h-32 p-1 border border-gray-200">
        <div className="h-full flex flex-col">
          <div className="text-lg font-medium p-1 text-gray-700">
            {date.getDate()}
          </div>
          <div className="flex-1 flex flex-col rounded-lg overflow-hidden">
            <div 
              onClick={() => handleShiftClick(date, 'day')}
              className={`flex-1 flex items-center justify-center cursor-pointer transition-all duration-200 
                ${getStatusColor(
                  availability[currentUser]?.[dateStr]?.day || 'none', 
                  'day'
                )}`}
            >
              <span className="text-sm font-medium">
                D ({dayStatuses.filter(s => s === 'available').length})
              </span>
            </div>
            <div 
              onClick={() => handleShiftClick(date, 'night')}
              className={`flex-1 flex items-center justify-center cursor-pointer transition-all duration-200 
                border-t border-gray-200 
                ${getStatusColor(
                  availability[currentUser]?.[dateStr]?.night || 'none', 
                  'night'
                )}`}
            >
              <span className="text-sm font-medium">
                N ({nightStatuses.filter(s => s === 'available').length})
              </span>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const StatisticCard = ({ type, stats }) => (
    <div className="bg-white rounded-lg p-4 shadow-sm">
      <h3 className="text-lg font-semibold mb-3">
        {type === 'day' ? 'Denní služby' : 'Noční služby'}
      </h3>
      <div className="space-y-2">
        <div className="flex items-center justify-between text-sm">
          <span className="text-gray-600">Chci sloužit</span>
          <span className="font-medium bg-emerald-100 text-emerald-800 px-2 py-1 rounded">
            {stats[type].available || 0}
          </span>
        </div>
        <div className="flex items-center justify-between text-sm">
          <span className="text-gray-600">Nehodí se</span>
          <span className="font-medium bg-amber-100 text-amber-800 px-2 py-1 rounded">
            {stats[type].maybe || 0}
          </span>
        </div>
        <div className="flex items-center justify-between text-sm">
          <span className="text-gray-600">Nemohu</span>
          <span className="font-medium bg-rose-100 text-rose-800 px-2 py-1 rounded">
            {stats[type].unavailable || 0}
          </span>
        </div>
      </div>
    </div>
  );

  return (
    <div className="container mx-auto p-6">
      <div className="grid grid-cols-4 gap-6">
        <div className="col-span-3">
          <Card className="bg-white shadow-xl">
            <CardHeader className="border-b border-gray-100">
              <div className="flex justify-between items-center">
                <CardTitle className="text-2xl font-semibold text-gray-800">
                  Plánování služeb v reálném čase
                </CardTitle>
                <div className="flex items-center gap-4">
                  {/* User Selection Dropdown */}
                  <select 
                    value={currentUser} 
                    onChange={(e) => setCurrentUser(e.target.value)}
                    className="p-2 border rounded"
                  >
                    {USERS.map(user => (
                      <option key={user.id} value={user.id}>
                        {user.name}
                      </option>
                    ))}
                  </select>

                  <Button 
                    variant="outline"
                    onClick={() => {
                      const newDate = new Date(activeMonth);
                      newDate.setMonth(newDate.getMonth() - 1);
                      setActiveMonth(newDate);
                    }}
                  >
                    Předchozí
                  </Button>
                  <span className="text-lg font-medium text-gray-700">
                    {mesice[activeMonth.getMonth()]} {activeMonth.getFullYear()}
                  </span>
                  <Button 
                    variant="outline"
                    onClick={() => {
                      const newDate = new Date(activeMonth);
                      newDate.setMonth(newDate.getMonth() + 1);
                      setActiveMonth(newDate);
                    }}
                  >
                    Další
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid grid-cols-7 gap-0">
                {dnyVTydnu.map(den => (
                  <div key={den} className="h-12 flex items-center justify-center font-semibold text-gray-500">
                    {den}
                  </div>
                ))}
                {Array(42).fill(null).map((_, index) => {
                  const date = new Date(activeMonth);
                  date.setDate(1);
                  const firstDay = date.getDay() || 7;
                  date.setDate(1 - firstDay + index + 1);
                  return <React.Fragment key={index}>{renderCalendarDay(date)}</React.Fragment>;
                })}
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <StatisticCard type="day" stats={getShiftStats} />
          <StatisticCard type="night" stats={getShiftStats} />
          
          <Card>
            <CardContent className="p-4">
              <div className="space-y-4">
                <div className="text-lg font-medium text-gray-800">
                  Celkem naplánováno:
                  <div className="text-sm text-gray-600">
                    Denní směny: {getTotalAvailableDays.dayShifts}
                    <br />
                    Noční směny: {getTotalAvailableDays.nightShifts}
                  </div>
                </div>
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 bg-emerald-500 rounded-lg" />
                    <span className="text-sm text-gray-600">Chci sloužit</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 bg-amber-500 rounded-lg" />
                    <span className="text-sm text-gray-600">Nehodí se mi</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 bg-rose-500 rounded-lg" />
                    <span className="text-sm text-gray-600">Nemohu</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 bg-gray-50 border border-gray-300 rounded-lg" />
                    <span className="text-sm text-gray-600">Není vybráno</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default RealTimePlanSluzeb;
